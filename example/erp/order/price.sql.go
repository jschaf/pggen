// Code generated by pggen. DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const findOrdersByPriceSQL = `SELECT * FROM orders WHERE order_total > $1;`

type FindOrdersByPriceRow struct {
	OrderID    int32
	OrderDate  pgtype.Timestamptz
	OrderTotal pgtype.Numeric
	CustomerID pgtype.Int4
}

// FindOrdersByPrice implements Querier.FindOrdersByPrice.
func (q *DBQuerier) FindOrdersByPrice(ctx context.Context, minTotal pgtype.Numeric) ([]FindOrdersByPriceRow, error) {
	rows, err := q.conn.Query(ctx, findOrdersByPriceSQL, minTotal)
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByPrice: %w", err)
	}
	items := []FindOrdersByPriceRow{}
	for rows.Next() {
		var item FindOrdersByPriceRow
		if err := rows.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
			return nil, fmt.Errorf("scan FindOrdersByPrice row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}

// FindOrdersByPriceBatch implements Querier.FindOrdersByPriceBatch.
func (q *DBQuerier) FindOrdersByPriceBatch(ctx context.Context, batch *pgx.Batch, minTotal pgtype.Numeric) {
	batch.Queue(findOrdersByPriceSQL, minTotal)
}

// FindOrdersByPriceScan implements Querier.FindOrdersByPriceScan.
func (q *DBQuerier) FindOrdersByPriceScan(results pgx.BatchResults) ([]FindOrdersByPriceRow, error) {
	rows, err := results.Query()
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, err
	}
	items := []FindOrdersByPriceRow{}
	for rows.Next() {
		var item FindOrdersByPriceRow
		if err := rows.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
			return nil, fmt.Errorf("scan FindOrdersByPriceBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}
