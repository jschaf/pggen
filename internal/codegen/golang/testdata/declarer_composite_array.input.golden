// SomeTable represents the Postgres composite type "some_table".
type SomeTable struct {
	Foo    int16       `json:"foo"`
	BarBaz pgtype.Text `json:"bar_baz"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

// newSomeTable creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'some_table'.
func (tr *typeResolver) newSomeTable() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"some_table",
		compositeField{name: "foo", typeName: "int2", defaultVal: &pgtype.Int2{}},
		compositeField{name: "bar_baz", typeName: "text", defaultVal: &pgtype.Text{}},
	)
}

// newSomeTableRaw returns all composite fields for the Postgres composite
// type 'some_table' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newSomeTableRaw(v SomeTable) []interface{} {
	return []interface{}{
		v.Foo,
		v.BarBaz,
	}
}

// newSomeTableArray creates a new pgtype.ValueTranscoder for the Postgres
// '_some_array' array type.
func (tr *typeResolver) newSomeTableArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_some_array", "some_table", tr.newSomeTable)
}

// newSomeTableArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_some_array' to encode query parameters.
func (tr *typeResolver) newSomeTableArrayInit(ps []SomeTable) pgtype.ValueTranscoder {
	dec := tr.newSomeTableArray()
	if err := dec.Set(tr.newSomeTableArrayRaw(ps)); err != nil {
		panic("encode []SomeTable: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_some_array"}
}

// newSomeTableArrayRaw returns all elements for the Postgres array type '_some_array'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newSomeTableArrayRaw(vs []SomeTable) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newSomeTableRaw(v)
	}
	return elems
}