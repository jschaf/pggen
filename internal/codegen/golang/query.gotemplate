{{- /*gotype: github.com/jschaf/pggen/internal/codegen/golang.TemplatedFile*/ -}}
{{- define "gen_query" -}}

// Code generated by pggen. DO NOT EDIT.

package {{.GoPkg}}

import (
{{ range $pkg := .Imports }}	"{{$pkg}}"
{{ end -}}
)


{{- if .IsLeader -}}
{{- "\n\n" -}}
// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
{{- range $pkgFile := .Pkg.Files -}}
{{- range $i, $q := $pkgFile.Queries }} {{- "\n\t" -}}
	{{- if $q.Doc }}{{ $q.Doc }}	{{ end -}}
	{{.Name}}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error)
	{{- "\n" -}}
{{end -}}
{{- end -}}
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

{{- range .Declarers}}{{- "\n\n" -}}{{ .Declare $.PkgPath }}{{ end -}}
{{- end -}}

{{- range $i, $q := .Queries -}}
{{- "\n\n" -}}
const {{ $q.SQLVarName }} = {{ $q.EmitPreparedSQL }}
{{- $q.EmitParamStruct -}}
{{- $q.EmitRowStruct -}}
{{- "\n\n" -}}
// {{ $q.Name }} implements Querier.{{ $q.Name }}.
func (q *DBQuerier) {{ $q.Name }}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "{{ $q.Name }}")
{{- if eq $q.ResultKind ":one" }}
	row := q.conn.QueryRow(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	{{ $q.EmitResultTypeInit "item" }}
	{{- $q.EmitResultDecoders }}
	if err := row.Scan({{ $q.EmitRowScanArgs }}); err != nil {
		return {{ $q.EmitResultExpr "item" }}, fmt.Errorf("query {{ $q.Name }}: %w", err)
	}
	{{- $q.EmitResultAssigns "item" }}
	return {{ $q.EmitResultExpr "item" }}, nil
{{- else if eq $q.ResultKind ":many" }}
	rows, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return nil, fmt.Errorf("query {{ $q.Name }}: %w", err)
	}
	defer rows.Close()
	{{ $q.EmitResultTypeInit "items" }}
	{{- $q.EmitResultDecoders }}
	for rows.Next() {
		var item {{ $q.EmitResultElem }}
		if err := rows.Scan({{- $q.EmitRowScanArgs -}}); err != nil {
			return nil, fmt.Errorf("scan {{ $q.Name }} row: %w", err)
		}
		{{- $q.EmitResultAssigns "nil" }}
		items = append(items, {{ $q.EmitResultExpr "item" }})
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close {{ $q.Name }} rows: %w", err)
	}
	return items, err
{{- else if eq $q.ResultKind ":exec" }}
	cmdTag, err := q.conn.Exec(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return cmdTag, fmt.Errorf("exec query {{ $q.Name }}: %w", err)
	}
	return cmdTag, err
{{- end }}
}
{{- end -}}

{{- if .IsLeader -}}
{{- "\n\n" -}}
// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
{{- end -}}
{{- "\n" -}}
{{- end -}}
