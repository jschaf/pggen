{{- /*gotype: github.com/jschaf/pggen/internal/codegen/golang.TemplatedFile*/ -}}
{{- define "gen_query" -}}

// Code generated by pggen. DO NOT EDIT.

package {{.GoPkg}}

import (
{{ range $pkg := .Imports }}	"{{$pkg}}"
{{ end -}}
)


{{- if .IsLeader -}}
{{- "\n\n" -}}
// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
{{- range $pkgFile := .Pkg.Files -}}
{{- range $i, $q := $pkgFile.Queries }} {{- "\n\t" -}}
	{{- if $q.Doc }}{{ $q.Doc }}	{{ end -}}
	{{.Name}}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error)
	{{- "\n" -}}
{{end -}}
{{- end -}}
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn}
}

{{- end -}}

{{- range $i, $q := .Queries -}}
{{- "\n\n" -}}
const {{ $q.SQLVarName }} = {{ $q.EmitPreparedSQL }}
{{- $q.EmitParamStruct -}}
{{- $q.EmitRowStruct -}}
{{- "\n\n" -}}
// {{ $q.Name }} implements Querier.{{ $q.Name }}.
func (q *DBQuerier) {{ $q.Name }}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "{{ $q.Name }}")
{{- if eq $q.ResultKind ":one" }}
	row, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return nil, fmt.Errorf("query {{ $q.Name }}: %w", err)
	}

	fds := rows.FieldDescriptions()
	{{- range $i, $col := $q.Outputs -}}
	{{ $q.EmitPlanScan $i $col}}
	{{- end -}}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ({{ $q.EmitSingularResultType }}, error) {
		vals := row.RawValues()
		{{ $q.EmitResultTypeInit "item" }}
		{{- range $i, $col := $q.Outputs -}}
		{{- $q.EmitScanColumn $i $col -}}
		{{- end -}}
	})
{{- else if eq $q.ResultKind ":many" }}
	row, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
	return nil, fmt.Errorf("query {{ $q.Name }}: %w", err)
	}

	fds := rows.FieldDescriptions()
	{{- range $i, $col := $q.Outputs -}}
		{{ $q.EmitPlanScan $i $col}}
	{{- end -}}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) ({{ $q.EmitSingularResultType }}, error) {
	vals := row.RawValues()
	{{ $q.EmitResultTypeInit "item" }}
	{{- range $i, $col := $q.Outputs -}}
		{{- $q.EmitScanColumn $i $col -}}
	{{- end -}}
	})
{{- else if eq $q.ResultKind ":exec" }}
	cmdTag, err := q.conn.Exec(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return cmdTag, fmt.Errorf("exec query {{ $q.Name }}: %w", err)
	}
	return cmdTag, err
{{- end }}
}
{{- end -}}
{{- "\n" -}}
{{ if .IsLeader }}
type scanCacheKey struct {
	oid      uint32
	format   int16
	typeName string
}

var (
	plans   = make(map[scanCacheKey]pgtype.ScanPlan, 16)
	plansMu sync.RWMutex
)

func planScan(codec pgtype.Codec, fd pgconn.FieldDescription, target any) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	plan = codec.PlanScan(nil, fd.DataTypeOID, fd.Format, target)
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return plan
}

type ptrScanner[T any] struct {
	basePlan pgtype.ScanPlan
}

func (s ptrScanner[T]) Scan(src []byte, dst any) error {
	if src == nil {
		return nil
	}
	d := dst.(**T)
	*d = new(T)
	return s.basePlan.Scan(src, *d)
}

func planPtrScan[T any](codec pgtype.Codec, fd pgconn.FieldDescription, target *T) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("*%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	basePlan := planScan(codec, fd, target)
	ptrPlan := ptrScanner[T]{basePlan}
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return ptrPlan
}
{{- end -}}
{{- end -}}
